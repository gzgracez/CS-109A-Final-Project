{
  "0": {
    "id": "0",
    "title": "Background",
    "content": "MotivationSpotify is a popular music streaming platform that allows users to curate their own playlists. Music recommender systems help users find songs based on what they might like. We wanted to help Grace curate a Spotify playlist of her favorite songs using the classification techniques we had learned in class.Grace struggles to classify with words what makes a song fit into her vibe. “I’d jam to Madison Thompson’s ‘Lonely Together,’ but definitely not to Avicii’s.”When words fail, data science might help. We decided to solve the problem of finding the best classification model for Grace’s playlist, and then use that model to find her more songs for her playlist.The Spotify API allows us to download playlists with feature data for each song in the playlist.We asked Grace to label a set of songs as included in her playlist and another set of songs as songs she would not want to listen to.We then constructed and analyzed classification models based on this data.PlaylistsGrace’s Favorites PlaylistGrace’s Not-So-Favorites PlaylistLiterature ReviewCurrent Challenges and Visions in Music Recommender Systems Research  Biggest current issues in MRS: cold start, automatic playlist generation, and evaluation.  State-of-the-art techniques in playlist extension include collaborative filtering and Markov chain models          limitations include ordering of songs within playlists and incorporating situational characteristics that affect listeners        Future work includes incorporating personality, current emotional state, political situation, and cultural situation into music recommendations.An Analysis of Approaches Taken in the ACM RecSys Challenge 2018  In 2018, Spotify sponsored a challenge involving addressing the automatic music playlist continuation problem  Most accurate classifiers involved:          Larger training sets produced better-performing models                  If training sets were subset, using a random subset of the playlist rather than the sequentially first songs in a playlist was most accurate in training a model                    Excluding “title” as meta-data for the playlist produced better models across the board      Solutions using the descriptors from the Spotify API were more efficient      TrailMix: An Ensemble Recommender System for Playlist Curation and Continuation  RecSys feature TrailMix compared 3 recommender models:          song clustering purely based on title      decorated neural collaborative filtering      decision tree        The title model performed very poorly compared to the other two models          The authors acknowledge that using analysis beyond the literal words, ex. incorporating NLP methods, could help        An ensemble of all three models performed best",
    "url": "http://localhost:4000/background.html",
    "relUrl": "/background.html"
  },
  "1": {
    "id": "1",
    "title": "Data Collection",
    "content": "Data CollectionWe collected our data by using the Spotify API to create a json file of tracks and their features, additionally labelling each track with a new feature we introduced, in_playlist, which equals 1 if Person X would include the track in her playlist and 0 if Person X would not include the track in her playlist.We accomplished this by manually creating 2 separate playlists, where one playlist includes random songs that Person X would include in her playlist and the other playlist includes random songs that Person X would not include in her playlist. We used the Spotify API user_playlist_tracks endpoint to collect some features, including track_ids, of the tracks in each of these playlists. We then used the audio_features endpoint of the Spotify API to get additional features like danceability, etc. for each of our tracks. Finally, we added the in_playlist feature to each of our tracks and wrote our final object to spotify.json.Description of Features:  danceability: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.  energy: Energy represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. A value of 0.0 is least energetic and 1.0 is most energetic.  key: The estimated overall key of the track. Integers map to pitches using standard Pitch Class Notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.  loudness: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values range between -60 and 0 db.  mode: Mode represents the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Mode is binary; major is represented by 1 and minor is 0.  speechiness: Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.  acousticness: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. instrumentalness: Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.  liveness: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.  valence: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).  tempo: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.  duration_ms: The duration of the track in milliseconds.  time_signature: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).  popularity: The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past.  in_playlist: Response variable. Categorical variable for whether in playlist of desire. 1 if in playlist, 0 if not in playlist.The following features were recorded to help with visualization later, but not used as predictors in our analysis, as they are not characteristics of the music itself.  name: Song title  artist: First artist of song  type: The object type: “audio_features”  id: The Spotify ID for the track.  uri: The Spotify URI for the track.  track_href: A link to the Web API endpoint providing full details of the track.  analysis_url: An HTTP URL to access the full audio analysis of this track. An access token is required to access this data.Initial ObservationsLooking at the density plots above, we note a few things.Some features that show clear differences in distribution between the playlist and non-playlist. While non-playlist songs contain a roughly uniform distribution of energy values, playlist songs spike at an energy level between 0.2-0.4.Acousticness in playlist tracks is much higher on average, spiking around 0.8, while non-playlist tracks most frequently have acousticness values around 0.1.Instrumentalness is a particularly interesting feature. While the distribution non-playlist tracks is bimodal, peaking at around 0 and 0.9, playlist tracks have a few very well-defined peaks between 0 and 0.3. We will note in advance that this may induce a risk of overfitting based on instrumentalness values.Playlist tracks have lower loudnesses on average, centering around -10, while non-playlist tracks -5.In terms of speechiness, the distribution for playlist tracks has a much lower variance and slightly lower expected value, centering around 0.3 while non-playlist tracks center around 0.4.Valence for non-playlist tracks is roughly uniformly distributed, while playlist tracks demonstrate a roughly normal distribution centered around 0.3.Finally in terms of popularity, playlist tracks show a peak in their distribution around 60, while non-playlist tracks have a more variable distribution with a peak between 45-55.The rest of the features are roughly similar in distribution between playlist and non-playlist tracks.",
    "url": "http://localhost:4000/data-collection.html",
    "relUrl": "/data-collection.html"
  },
  "2": {
    "id": "2",
    "title": "Exploratory Data Analysis",
    "content": "",
    "url": "http://localhost:4000/eda.html",
    "relUrl": "/eda.html"
  },
  "3": {
    "id": "3",
    "title": "CS109-Final Notebook",
    "content": " CS109A Introduction to Data Science:  Spotify Final ProjectHarvard UniversityFall 2018Instructors: Pavlos Protopapas, Kevin RaderGroup Members: Tejal Patwardhan, Akshitha Ramachandran, Grace Zhang#RUN THIS CELL import requestsfrom IPython.core.display import HTMLstyles = requests.get(&quot;https://raw.githubusercontent.com/Harvard-IACS/2018-CS109A/master/content/styles/cs109.css&quot;).textHTML(styles)# import necessary notebooksimport numpy as npimport pandas as pdimport matplotlibimport matplotlib.pyplot as pltimport statsmodels.api as smfrom statsmodels.api import OLSfrom sklearn import preprocessingfrom sklearn.utils import resamplefrom sklearn.model_selection import cross_val_scorefrom sklearn.preprocessing import PolynomialFeaturesfrom sklearn.metrics import r2_scorefrom sklearn.model_selection import train_test_split, KFoldfrom sklearn.linear_model import LogisticRegressionfrom sklearn.linear_model import LogisticRegressionCVfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.ensemble import AdaBoostClassifierfrom sklearn.neighbors import KNeighborsRegressorfrom sklearn.linear_model import RidgeCVfrom sklearn.linear_model import LassoCVfrom sklearn.metrics import accuracy_scorefrom sklearn.metrics import confusion_matrixfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis from sklearn.preprocessing import PolynomialFeaturesfrom pandas.plotting import scatter_matriximport seaborn as snssns.set(style='whitegrid')pd.set_option('display.width', 1500)pd.set_option('display.max_columns', 100)import random%matplotlib inlineData Collection and CleaningWe collected our data by using the Spotify API to create a json file of tracks and their features. Additionally, we labeled each track with a new feature , in_playlist, which equals 1 if Akshitha would include the track in her playlist and 0 if Akshitha would not include the track in her playlist.We accomplished this by manually creating 2 separate playlists, where one playlist includes random songs that Person X would include in her playlist and the other playlist includes random songs that Person X would not include in her playlist. We used the Spotify API user_playlist_tracks endpoint to collect some features, including track_ids, of the tracks in each of these playlists. We then used the audio_features endpoint of the Spotify API to get additional features like danceability, etc. for each of our tracks. Finally, we added the in_playlist feature to each of our tracks and wrote our final object to spotify.json.Data DescriptionOur data includes the following features:  danceability: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.  energy: Energy represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. A value of 0.0 is least energetic and 1.0 is most energetic.  key: The estimated overall key of the track. Integers map to pitches using standard Pitch Class Notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.  loudness: The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values range between -60 and 0 db.  mode: Mode represents the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Mode is binary; major is represented by 1 and minor is 0.  speechiness: Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.  acousticness: A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. instrumentalness: Predicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.  liveness: Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.  valence: A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).  tempo: The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.  duration_ms: The duration of the track in milliseconds.  time_signature: An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).  popularity: The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past.  in_playlist: Response variable. Categorical variable for whether in playlist of desire. 1 if in playlist, 0 if not in playlist.The following features were recorded to help with visualization later, but not used as predictors in our analysis, as they are not characteristics of the music itself.  name: Song title  artist: First artist of song  type: The object type: “audio_features”  id: The Spotify ID for the track.  uri: The Spotify URI for the track.  track_href: A link to the Web API endpoint providing full details of the track.  analysis_url: An HTTP URL to access the full audio analysis of this track. An access token is required to access this data.Exploratory Data Analysisrandom.seed(1)# load in datasetspotify_df = pd.read_csv(&quot;data/spotify-more2.csv&quot;)# drop unnecessary columnsspotify_df = spotify_df.drop(columns=['type', 'id', 'uri', 'track_href', 'analysis_url', 'name', 'artist', 'Unnamed: 0'])# display head of datadisplay(spotify_df.head())                  acousticness      danceability      duration_ms      energy      in_playlist      instrumentalness      key      liveness      loudness      mode      popularity      speechiness      tempo      time_signature      valence                  0      0.929      0.516      138760      0.0663      0      0.000972      7      0.1120      -19.221      0      11      0.0334      109.879      4      0.278              1      0.539      0.454      324133      0.2600      0      0.000780      8      0.0675      -13.193      0      63      0.0401      174.322      5      0.598              2      0.360      0.676      205773      0.4400      0      0.000069      0      0.1620      -11.960      1      59      0.0291      80.434      4      0.499              3      0.984      0.466      294307      0.0718      0      0.000931      0      0.1070      -17.999      1      56      0.0374      121.885      4      0.196              4      0.779      0.496      423573      0.6340      0      0.402000      5      0.0746      -10.328      0      60      0.0364      93.357      4      0.606      # display shape of datadisplay(spotify_df[spotify_df[&quot;in_playlist&quot;]==0].shape)(2500, 15)We have 5060 songs in our initial analysis. 2650 are included in Akshitha’s playlist, and 2500 are not included in Akshitha’s playlist.# generate summary chart of featuresfeatures = []means = []var = []ranges = []mins = []maxes = []for feature in spotify_df:    if feature != &quot;in_playlist&quot;:        features.append(feature)        means.append(spotify_df[feature].mean())        var.append(spotify_df[feature].var())        ranges.append(spotify_df[feature].ptp())        mins.append(spotify_df[feature].min())        maxes.append(spotify_df[feature].max())summary_df = pd.DataFrame(data = {'feature': features,                                   'mean': means,                                  'var' : var,                                  'range': ranges,                                   'min': mins,                                   'max': maxes}) Below are summary statistics for all the features we plan to analyze:display(summary_df)                  feature      mean      var      range      min      max                  0      acousticness      0.540199      1.267884e-01      9.959953e-01      0.000005      0.996              1      danceability      0.570920      2.931912e-02      9.162000e-01      0.061800      0.978              2      duration_ms      245718.492885      1.911563e+10      3.346533e+06      44507.000000      3391040.000              3      energy      0.439224      6.633419e-02      9.901450e-01      0.000855      0.991              4      instrumentalness      0.143138      9.302492e-02      9.870000e-01      0.000000      0.987              5      key      5.223913      1.251578e+01      1.100000e+01      0.000000      11.000              6      liveness      0.163377      1.798945e-02      9.800000e-01      0.012000      0.992              7      loudness      -10.270219      3.464989e+01      4.217600e+01      -42.476000      -0.300              8      mode      0.650198      2.274856e-01      1.000000e+00      0.000000      1.000              9      popularity      36.977470      4.773025e+02      1.000000e+02      0.000000      100.000              10      speechiness      0.070655      6.217856e-03      8.989000e-01      0.023100      0.922              11      tempo      117.657563      8.604272e+02      1.790410e+02      42.581000      221.622              12      time_signature      3.919763      1.655315e-01      5.000000e+00      0.000000      5.000              13      valence      0.425801      5.455384e-02      9.591000e-01      0.025900      0.985      We can see that all features have values that are expected as per the Spotify API documentation. To analyze each feature in more granularity we looked at density plots.response_col = 'in_playlist'resp_col_loc = list(spotify_df.columns).index('in_playlist')spotify_graphs_df = spotify_df.drop(columns=[response_col])num_cols = len(spotify_graphs_df.columns)nbin = 15# iterate through all the features and display themfig, axs = plt.subplots(num_cols, 1, figsize=(10,50))for i in range(num_cols):    sns.distplot(spotify_graphs_df[spotify_df.in_playlist == 0][spotify_graphs_df.columns[i]], hist = False, kde = True, ax=axs[i])    sns.distplot(spotify_graphs_df[spotify_df.in_playlist == 1][spotify_graphs_df.columns[i]], hist = False, kde = True, ax=axs[i])    axs[i].set_title(&quot;Density of &quot; + str(spotify_graphs_df.columns[i]))    axs[i].set_ylabel(r'Frequency')fig.subplots_adjust(hspace=.5)plt.show()Looking at the density plots above, we note some features that show clear differences in distribution between the playlist and non-playlist. While non-playlist songs contain a roughly uniform distribution of energy values, playlist songs spike at an energy level between 0.2-0.4.Acousticness in playlist tracks is much higher on average, spiking around 0.8, while non-playlist tracks most frequently have acousticness values around 0.1.Instrumentalness is a particularly interesting feature. While the distribution non-playlist tracks is bimodal, peaking at around 0 and 0.9, playlist tracks have a few very well-defined peaks between 0 and 0.3. We will note in advance that this may induce a risk of overfitting based on instrumentalness values.Playlist tracks have lower loudnesses on average, centering around -10, while non-playlist tracks -5.In terms of speechiness, the distribution for playlist tracks has a much lower variance and slightly lower expected value, centering around 0.3 while non-playlist tracks center around 0.4.Valence for non-playlist tracks is roughly uniformly distributed, while playlist tracks demonstrate a roughly normal distribution centered around 0.3.Finally in terms of popularity, playlist tracks show a peak in their distribution around 60, while non-playlist tracks have a more variable distribution with a peak between 45-55.The rest of the features are roughly similar in distribution between playlist and non-playlist tracks.# pair plotsax = sns.pairplot(spotify_df, hue = &quot;in_playlist&quot;, diag_kind=&quot;kde&quot;)axplt.show()/anaconda3/lib/python3.6/site-packages/statsmodels/nonparametric/kde.py:488: RuntimeWarning: invalid value encountered in true_divide  binned = fast_linbin(X, a, b, gridsize) / (delta * nobs)/anaconda3/lib/python3.6/site-packages/statsmodels/nonparametric/kdetools.py:34: RuntimeWarning: invalid value encountered in double_scalars  FAC1 = 2*(np.pi*bw/RANGE)**2The pairplot above demonstrates a few interesting things. First, we notice positive correlations between loudness and energy, loudness and danceability, and danceablility and loudness. All three correlations are weak to moderate. We also notice a negative correlation between acousticness and energy.Baseline Logistic Classifier# set seedrandom.seed(1)# split into train and testtrain, test = train_test_split(spotify_df, test_size = 0.2)x_train, y_train = train.drop(columns=[response_col]), train[response_col].valuesx_test, y_test = test.drop(columns=[response_col]), test[response_col].values# create logistic modellog_reg_model = LogisticRegression(C=100000, fit_intercept=False)log_reg_model.fit(x_train, y_train)# predictlog_reg_train_predictions = log_reg_model.predict(x_train)log_reg_test_predictions = log_reg_model.predict(x_test)# calculate scoreslog_reg_train_score = accuracy_score(y_train, log_reg_train_predictions)log_reg_test_score = accuracy_score(y_test, log_reg_test_predictions)# display scoresprint('Classification accuracy for train set: {}'.format(log_reg_train_score))print('Classification accuracy for test set: {}'.format(log_reg_test_score))Classification accuracy for train set: 0.6902173913043478Classification accuracy for test set: 0.6798418972332015Our baseline logistic model is able to achieve an accuracy of roughly 69% in the training set, and 68% in the test set.Add Quadratic Terms# add quadratic termsx_train_q = x_train.copy()x_test_q = x_test.copy()# add quadratic termsfor col in x_train:    if col != &quot;mode&quot;: # our only binary variable        name = col + &quot;^2&quot; # name column as col^2        x_train_q[name] = np.square(x_train_q[col])        x_test_q[name] = np.square(x_test_q[col])# create logistic modellog_reg_model_q = LogisticRegression(C=100000, fit_intercept=False)log_reg_model_q.fit(x_train_q, y_train)# predictlog_reg_train_q_predictions = log_reg_model_q.predict(x_train_q)log_reg_test_q_predictions = log_reg_model_q.predict(x_test_q)# calculate scoreslog_reg_train_q_score = accuracy_score(y_train, log_reg_train_q_predictions)log_reg_test_q_score = accuracy_score(y_test, log_reg_test_q_predictions)# display scoresprint('Classification accuracy for quadratic terms train set: {}'.format(log_reg_train_q_score))print('Classification accuracy for quadratic test set: {}'.format(log_reg_test_q_score))Classification accuracy for quadratic terms train set: 0.4943181818181818Classification accuracy for quadratic test set: 0.49308300395256915When trying to add quadratic terms, we see that the model performs worse. The test and training accuracies are both low at roughly $49.5 %$.Regularizationalphas = (.1,.5,1,5,10,50,100)# L1 regularizationlr_l1_model = LogisticRegressionCV(cv=5, penalty='l1', solver='liblinear', max_iter=100000).fit(x_train, y_train)lr_l2_model = LogisticRegressionCV(cv=5, max_iter=100000).fit(x_train, y_train)def get_lr_cv(model, model_name, x_train=x_train, y_train=y_train, x_test=x_test, y_test=y_test):    train_predictions = model.predict(x_train)    train_score = accuracy_score(y_train, train_predictions)    test_predictions = model.predict(x_test)    test_score = accuracy_score(y_test, test_predictions)    test_confusion_matrix = confusion_matrix(y_test, test_predictions)    print('[{}] Classification accuracy for train set: {}'.format(model_name, train_score))    print('[{}] Classification accuracy for test set: {}'.format(model_name, test_score))    return train_score, test_score, test_confusion_matrixl1_stats = get_lr_cv(lr_l1_model, 'L1 Reg')l2_stats = get_lr_cv(lr_l2_model, 'L2 Reg')[L1 Reg] Classification accuracy for train set: 0.8888339920948617[L1 Reg] Classification accuracy for test set: 0.8784584980237155[L2 Reg] Classification accuracy for train set: 0.6902173913043478[L2 Reg] Classification accuracy for test set: 0.6768774703557312L1 regularization performs much better than L2. The L1 regularized model achieves about 88.9% accuracy in the training data and about 87.8% in the test, well outperforming our baseline model. The L2 regularized model performs on par with our baseline, achieving a training accuracy of around 69% and a test accuracy of 67.7%.LDA and QDA# LDAlda = LinearDiscriminantAnalysis()model_lda = lda.fit(x_train, y_train)acc_lda = model_lda.score(x_train, y_train)acc_lda_test = model_lda.score(x_test, y_test)# print accuracy scoresprint(&quot;LDA Accuracy, Training Set :&quot;,str(acc_lda)+'%')print(&quot;LDA Accuracy, Testing Set :&quot;,str(acc_lda_test)+'%')# QDAqda = QuadraticDiscriminantAnalysis()model_qda = qda.fit(x_train, y_train)acc_qda = model_qda.score(x_train, y_train)acc_qda_test = model_qda.score(x_test, y_test)print(&quot;QDA Accuracy, Training Set :&quot;,str(acc_qda)+'%')print(&quot;QDA Accuracy, Testing Set :&quot;,str(acc_qda_test)+'%')LDA Accuracy, Training Set : 0.8829051383399209%LDA Accuracy, Testing Set : 0.8764822134387352%QDA Accuracy, Training Set : 0.8656126482213439%QDA Accuracy, Testing Set : 0.8735177865612648%LDA performs better than QDA, and both perform above baseline. LDA achieves an accuracy of about 88.3% in the training and 87.6% in the testing data, while QDA ahieves an accuracy of about 86.6% in the training and 87.3% in the testing data.Decision Trees# classify by depthdef treeClassifierByDepth(depth, x_train, y_train, cvt = 5):    model = DecisionTreeClassifier(max_depth=depth).fit(x_train, y_train)    return cross_val_score(model, x_train, y_train, cv = cvt)# 5-fold CVmeans = []lower = []upper = []sds = []trains = []for i in range(1, 20):    # fit model    tc = treeClassifierByDepth(i, x_train, y_train)    # calc mean and sd    cur_mean = np.mean(tc)    cur_sd = np.std(tc)    train_val = DecisionTreeClassifier(max_depth=i).fit(x_train, y_train).score(x_train,y_train)    # add to lists    trains.append(train_val)    means.append(cur_mean)    lower.append(cur_mean - 2*cur_sd)    upper.append(cur_mean + 2*cur_sd)    plt.plot(range(1,20),means)plt.fill_between(range(1,20), lower, upper, alpha = 0.3, label = &quot;Mean CV score (+/- 2SD)&quot;)plt.plot(range(1,20), trains, label=&quot;Train&quot;)plt.title(&quot;Spotify Playlist Decision Tree Model Estimated Performance&quot;)plt.xlabel(&quot;Maximum Depth&quot;)plt.ylabel(&quot;Score&quot;)plt.legend()plt.show()# cross validation performancetrain_score = means[5]print(&quot;[Decision Tree Classifier] Mean classification accuracy train: &quot;,train_score)print(&quot;Mean +/- 2 SD: (&quot;, lower[4],&quot;,&quot;,upper[4],&quot;)&quot;)[Decision Tree Classifier] Mean classification accuracy (train):  0.8809326430505754Mean +/- 2 SD: ( 0.877591118434013 , 0.8892112214492387 )We achieve the best cross-validated score at a tree depth of $6$ with an accuracy of 88.1%. Additionally, it had a relatively narrow spread in estimated performances, as there is a roughly 1% difference between +/- two standard deviations.# test set performancemodel_dec_tree = DecisionTreeClassifier(max_depth=6).fit(x_train, y_train)test_score = model_dec_tree.score(x_test, y_test)print(&quot;[Decision Tree Classifier] Test set classification accuracy: &quot;, test_score)[Decision Tree Classifier] Test set classification accuracy:  0.8952569169960475We see that it performs quite well, with an accuracy score of $0.895$, proving superior to all the other models we have tried so far.BaggingCreate 45 bootstrapped datasets, fitting a decision tree to each of them and saving their predictions:# bootstrapnew_depth = 6num_trees = 45bagging_train_arr = []bagging_test_arr = []estimators = []tree_res = []tree = DecisionTreeClassifier(max_depth=new_depth)# classify train and test with bootstrap modelsfor i in range(num_trees):    boot_x, boot_y = resample(x_train, y_train)    fit_tree = tree.fit(boot_x, boot_y)    estimators.append(fit_tree)    bagging_train_arr.append(tree.predict(x_train))    bagging_test_arr.append(tree.predict(x_test))Construct dataframs with all the bootstrapped data:# trainbagging_train = pd.DataFrame()for i in range(len(bagging_train_arr)):    col_name = &quot;Bootstrap Model &quot; + str(i + 1)    bagging_train[col_name] = bagging_train_arr[i]# testbagging_test = pd.DataFrame()for i in range(len(bagging_test_arr)):    col_name = &quot;Bootstrap Model &quot; + str(i + 1)    bagging_test[col_name] = bagging_test_arr[i]    # generate renaming row objrename = {}for i in range(0, 1104):    rename[i] = &quot;Training Row &quot; + str(i + 1)bagging_train.rename(rename, inplace=True)bagging_test.rename(rename,  inplace=True)Combine predictions from all the bootstraps and assess how the model performs:# combining all data points from the data to determine accuracyy_preds_train = []y_preds_test = []for row in bagging_train.iterrows():    if np.mean(row[1]) &amp;gt; 0.5:        y_preds_train.append(1)    else:        y_preds_train.append(0)for row in bagging_test.iterrows():    if np.mean(row[1]) &amp;gt; 0.5:        y_preds_test.append(1)    else:        y_preds_test.append(0)        def compare_acc(preds, actual):    count = 0    for i in range(len(preds)):        if preds[i] == actual.item(i):            count += 1    return(count/len(preds))bagging_train_score = compare_acc(y_preds_train,y_train)bagging_test_score = compare_acc(y_preds_test,y_test)print(&quot;Training Accuracy: &quot;, bagging_train_score)print(&quot;Test Accuracy: &quot;, bagging_test_score)Training Accuracy:  0.9352766798418972Test Accuracy:  0.9021739130434783The model clearly performed better after using bootstrapped data to fit it. It has increased from 88% on the training data to 93.5%, and from 89.5% on the test data to 90.2%.Random Forest# model random forestmodel_rf = RandomForestClassifier(n_estimators=num_trees, max_depth=new_depth)# fit model on X_train datamodel_rf.fit(x_train, y_train)# predict using modely_pred_train_rf = model_rf.predict(x_train)y_pred_test_rf = model_rf.predict(x_test)# accuracy from train and testtrain_score_rf = accuracy_score(y_train, y_pred_train_rf)test_score_rf = accuracy_score(y_test, y_pred_test_rf)# print accuracy scoresprint(&quot;Random Forest Accuracy, Training Set :&quot;,str(train_score_rf)+'%')print(&quot;Random Forest Accuracy, Testing Set :&quot;,str(test_score_rf)+'%')Random Forest Accuracy, Training Set : 0.9266304347826086%Random Forest Accuracy, Testing Set : 0.8962450592885376%A random forest, at the same depth as the decision tree (namely a depth of 6) performs well too. The test data reaches an accuracy of about $92.7 %$ in the training at $89.6%$ in the test. Bootstrapping performed better in both the training and test sets.Boosting# define classifier functiondef boostingClassifier(x_train, y_train, depth):    # AdaBoostClassifier    abc = AdaBoostClassifier(DecisionTreeClassifier(max_depth=depth),                         n_estimators=800, learning_rate = 0.05)    abc.fit(x_train, y_train)    # staged_score train to plot    abc_predicts_train = list(abc.staged_score(x_train,y_train))    plt.plot(abc_predicts_train, label = &quot;train&quot;);    # staged_score test to plot    abc_predicts_test = list(abc.staged_score(x_test,y_test))    plt.plot(abc_predicts_test, label = &quot;test&quot;);    plt.legend()    plt.title(&quot;AdaBoost Classifier Accuracy, n = &quot;+str(depth))    plt.xlabel(&quot;Iterations&quot;)    plt.show()        return(&quot;Maximum test accuracy for depth of &quot;+str(depth)+&quot; is &quot;+str(max(abc_predicts_test))+&quot; at &quot;+str(abc_predicts_test.index(max(abc_predicts_test)))+&quot; iterations&quot;)for i in range(1,5):    print(boostingClassifier(x_train, y_train, i))Maximum test accuracy for depth of 1 is 0.9120553359683794 at 390 iterationsMaximum test accuracy for depth of 2 is 0.9347826086956522 at 381 iterationsMaximum test accuracy for depth of 3 is 0.9288537549407114 at 182 iterationsMaximum test accuracy for depth of 4 is 0.9209486166007905 at 229 iterationsWe see based upon an AdaBoostClassifier the maximum test accuracy of $93.5 %$ is attained at a depth of 2. This is attained after 381 iterations. The AdaBoostClassifier is our best perfoming model so far.kNN# make regressorks = range(1, 100) # Grid of k'sscores_train = [] # R2 scoresscores_test = [] # R2 scoresfor k in ks:    knnreg = KNeighborsRegressor(n_neighbors=k) # Create KNN model    knnreg.fit(x_train, y_train) # Fit the model to training data    score_train = knnreg.score(x_train, y_train) # Calculate R^2 score    scores_train.append(score_train)    score_test = knnreg.score(x_test, y_test) # Calculate R^2 score    scores_test.append(score_test)# Plotfig, ax = plt.subplots(1,2, figsize=(20,6))ax[0].plot(ks, scores_train,'o-')ax[0].set_xlabel(r'$k$')ax[0].set_ylabel(r'$R^{2}$')ax[0].set_title(r'Train $R^{2}$')ax[1].plot(ks, scores_test,'o-')ax[1].set_xlabel(r'$k$')ax[1].set_ylabel(r'$R^{2}$')ax[1].set_title(r'Test $R^{2}$')plt.show()Our kNN regressor performs quite poorly.",
    "url": "http://localhost:4000/final_notebook/final_notebook.html",
    "relUrl": "/final_notebook/final_notebook.html"
  },
  "4": {
    "id": "4",
    "title": "Home",
    "content": "OverviewFor our final project, we used the Spotify API help Grace curate her playlist. We had three goals:  to create the best performing model to classify songs as in or out of Grace’s playlist  to use that model to suggest new songs for Grace’s playlist  to produce a user-friendly interface using jekyll to display our analysis, so that others can replicate our method on their playlistsWebsite NavigationMotivations, overall summary of project, literature review/related work- backgroundData description, eda, modelling approach: evaluation metric of accuracy score - datanotebookresults, conclusions - analysissummary of what found, future work - moving forwardAbout UsWe are Tejal Patwardhan, Akshitha Ramachandran, and Grace Zhang, group 49 for Cs109a. Special thanks to Pavlos Protopapas, Kevin Rader, and Rashmi Banthia for their assistance.",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "5": {
    "id": "5",
    "title": "Million Playlist Dataset",
    "content": "The Million Playlist DatasetThe Million Playlist Dataset contains 1,000,000 playlists created byusers on the Spotify platform.  It can be used by researchers interestedin exploring how to improve the music listening experience.What’s in the Million Playlist DatasetThe MPD contains a million user-generated playlists. These playlistswere created during the period of January 2010 through October 2017.Each playlist in the MPD contains a playlist title, the track list(including track metadata) editing information (last edit time, number of playlist edits) and other miscellaneous information about the playlist. See the DetailedDescription section for more details.LicenseUsage of the Million Playlist Dataset is subject to these license termsCiting the Million Playlist DatasetCitation information for the dataset can be found atrecsys-challenge.spotify.com/datasetGetting the datasetThe dataset is available at recsys-challenge.spotify.com/datasetVerifying your datasetYou can validate the dataset by checking the md5 hashes of the data.  From the top level directory of the MPD:% md5sum -c md5sumsThis should print out OK for each of the 1,000 slice files in the dataset.You can also compute a number of statistics for the dataset as follows:% python src/stats.py dataThe output of this program should match what is in ‘stats.txt’. Depending on how fast your computer is, stats.py can take 30 minutes or more to run.Detailed descriptionThe Million Playlist Dataset consists of 1,000 slice files. These files have the naming convention of:mpd.slice.STARTING_PLAYLIST_ID_-_ENDING_PLAYLIST_ID.jsonFor example, the first 1,000 playlists in the MPD are in a file called mpd.slice.0-999.json and the last 1,000 playlists are in a file calledmpd.slice.999000-999999.json.Each slice file is a JSON dictionary with two fields:info and playlists.info FieldThe info field is a dictionary that contains general information about the particular slice:  slice - the range of slices that in in this particular file - such as 0-999  version -  - the current version of the MPD (which should be v1)  generated_on - a timestamp indicating when the slice was generated.playlists fieldThis is an array that typically contains 1,000 playlists. Each playlist is a dictionary that contains the following fields:  pid - integer - playlist id - the MPD ID of this playlist. This is an integer between 0 and 999,999.  name - string - the name of the playlist  description - optional string - if present, the description given to the playlist.  Note that user-provided playlist descrptions are a relatively new feature of Spotify, so most playlists do not have descriptions.  modified_at - seconds - timestamp (in seconds since the epoch) when this playlist was last updated. Times are rounded to midnight GMT of the date when the playlist was last updated.  num_artists - the total number of unique artists for the tracks in the playlist.  num_albums - the number of unique albums for the tracks in the playlist  num_tracks - the number of tracks in the playlist  num_followers - the number of followers this playlist had at the time the MPD was created. (Note that the follower count does not including the playlist creator)  num_edits - the number of separate editing sessions. Tracks added in a two hour window are considered to be added in a single editing session.  duration_ms - the total duration of all the tracks in the playlist (in milliseconds)  collaborative -  boolean - if true, the playlist is a collaborative playlist. Multiple users may contribute tracks to a collaborative playlist.  tracks - an array of information about each track in the playlist. Each element in the array is a dictionary with the following fields:          track_name - the name of the track      track_uri - the Spotify URI of the track      album_name - the name of the track’s album      album_uri - the Spotify URI of the album      artist_name - the name of the track’s primary artist      artist_uri - the Spotify URI of track’s primary artist      duration_ms - the duration of the track in milliseconds      pos - the position of the track in the playlist (zero-based)      Here’s an example of a typical playlist entry:    {        &quot;name&quot;: &quot;musical&quot;,        &quot;collaborative&quot;: &quot;false&quot;,        &quot;pid&quot;: 5,        &quot;modified_at&quot;: 1493424000,        &quot;num_albums&quot;: 7,        &quot;num_tracks&quot;: 12,        &quot;num_followers&quot;: 1,        &quot;num_edits&quot;: 2,        &quot;duration_ms&quot;: 2657366,        &quot;num_artists&quot;: 6,        &quot;tracks&quot;: [            {                &quot;pos&quot;: 0,                &quot;artist_name&quot;: &quot;Degiheugi&quot;,                &quot;track_uri&quot;: &quot;spotify:track:7vqa3sDmtEaVJ2gcvxtRID&quot;,                &quot;artist_uri&quot;: &quot;spotify:artist:3V2paBXEoZIAhfZRJmo2jL&quot;,                &quot;track_name&quot;: &quot;Finalement&quot;,                &quot;album_uri&quot;: &quot;spotify:album:2KrRMJ9z7Xjoz1Az4O6UML&quot;,                &quot;duration_ms&quot;: 166264,                &quot;album_name&quot;: &quot;Dancing Chords and Fireflies&quot;            },            {                &quot;pos&quot;: 1,                &quot;artist_name&quot;: &quot;Degiheugi&quot;,                &quot;track_uri&quot;: &quot;spotify:track:23EOmJivOZ88WJPUbIPjh6&quot;,                &quot;artist_uri&quot;: &quot;spotify:artist:3V2paBXEoZIAhfZRJmo2jL&quot;,                &quot;track_name&quot;: &quot;Betty&quot;,                &quot;album_uri&quot;: &quot;spotify:album:3lUSlvjUoHNA8IkNTqURqd&quot;,                &quot;duration_ms&quot;: 235534,                &quot;album_name&quot;: &quot;Endless Smile&quot;            },            {                &quot;pos&quot;: 2,                &quot;artist_name&quot;: &quot;Degiheugi&quot;,                &quot;track_uri&quot;: &quot;spotify:track:1vaffTCJxkyqeJY7zF9a55&quot;,                &quot;artist_uri&quot;: &quot;spotify:artist:3V2paBXEoZIAhfZRJmo2jL&quot;,                &quot;track_name&quot;: &quot;Some Beat in My Head&quot;,                &quot;album_uri&quot;: &quot;spotify:album:2KrRMJ9z7Xjoz1Az4O6UML&quot;,                &quot;duration_ms&quot;: 268050,                &quot;album_name&quot;: &quot;Dancing Chords and Fireflies&quot;            },            // 8 tracks omitted            {                &quot;pos&quot;: 11,                &quot;artist_name&quot;: &quot;Mo' Horizons&quot;,                &quot;track_uri&quot;: &quot;spotify:track:7iwx00eBzeSSSy6xfESyWN&quot;,                &quot;artist_uri&quot;: &quot;spotify:artist:3tuX54dqgS8LsGUvNzgrpP&quot;,                &quot;track_name&quot;: &quot;Fever 99 u00b0&quot;,                &quot;album_uri&quot;: &quot;spotify:album:2Fg1t2tyOSGWkVYHlFfXVf&quot;,                &quot;duration_ms&quot;: 364320,                &quot;album_name&quot;: &quot;Come Touch The Sun&quot;            }        ],    }ToolsThere are some tools that you can use with the dataset.stats.pyThis python program will iterate through the entire MPD and display summary information about the contents of the MPD.Usage:% python src/stats.py datashow.pyThis python program will show playlists given their ID.Show playlist with PID 10:% python src/show.py 10Show the first 500 and the last 500 playlists:% python src/show.py 0-500 999500-1000000Show the raw json for 3 playlists:% python src/show.py --raw 10 20 30Show 1000 playlists without the track details:% python src/show.py --compact 300-1300 Show all playlists:% python src/show.py --compact 0-1000000How was the dataset builtThe Million Playist Dataset is created by sampling playlists from the billions of playlists that Spotify users have created over the years.  Playlists that meet the following criteria are selected at random:  Created by a user that resides in the United States and is at least 13 years old  Was a public playlist at the time the MPD was generated  Contains at least 5 tracks  Contains no more than 250 tracks  Contains at least 3 unique artists  Contains at least 2 unique albums  Has no local tracks (local tracks are non-Spotify tracks that a user has on their local device)  Has at least one follower (not including the creator)  Was created after January 1, 2010 and before December 1, 2017  Does not have an offensive title  Does not have an adult-oriented title if the playlist was created by a user under 18 years of ageAdditionally, some playlists have been modified as follows:  Potentially offensive playlist descriptions are removed  Tracks added on or after November 1, 2017 are removedPlaylists are sampled randomly, for the most part, but with some dithering to disguise the true distribution of playlists within Spotify. Paper tracks may be added to some playlists to help us identify improper/unlicensed use of the dataset.Overall demographics of users contributing to the MPDGender  Male: 45%  Female: 54%  Unspecified: 0.5%  Nonbinary: 0.5%Age  18-24:  43%  25-34:  31%  35-44:   9%  45-54:   4%  55+:     3%  Other:  10%Country  US: 100%Who built the datasetThe million playlist dataset was built by the following researchers @ Spotify:  Cedric De Boom  Ching-Wei Chen  Jean Garcia-Gathright  Paul Lamere  James McInerney  Vidhya Murali  Hugh Rawlinson  Sravana Reddy  Romain Yon",
    "url": "http://localhost:4000/million-playlist-README.html",
    "relUrl": "/million-playlist-README.html"
  }
}
